package myPackage;


import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;


public class frmSearchExpense extends javax.swing.JInternalFrame {
        private static final String JDBC_URL = "jdbc:mysql://localhost:3306/expensemanagement";
        private static final String DB_USER = "root";
        private static final String DB_PASSWORD = "880011mysqlfeni";
        private Connection connection;

    public frmSearchExpense() {
        initComponents();
        try {
            connection = DriverManager.getConnection(JDBC_URL, DB_USER, DB_PASSWORD);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Failed to connect to the database: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        lblReason = new javax.swing.JLabel();
        cboReason = new javax.swing.JComboBox<>();
        lblAmount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAmount = new javax.swing.JTextArea();
        btnSearchByDate = new javax.swing.JButton();
        btnSearchByReason = new javax.swing.JButton();

        setClosable(true);
        setTitle("Search Expense");

        lblDate.setText("Date:");

        lblReason.setText("Reason:");

        cboReason.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "transport", "entertainment", "food", "other" }));
        cboReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboReasonActionPerformed(evt);
            }
        });

        lblAmount.setText("Amount:");

        txtAmount.setColumns(20);
        txtAmount.setRows(5);
        jScrollPane1.setViewportView(txtAmount);

        btnSearchByDate.setText("Search By Date");
        btnSearchByDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchByDateMouseClicked(evt);
            }
        });

        btnSearchByReason.setText("Search By Reason");
        btnSearchByReason.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSearchByReasonMouseClicked(evt);
            }
        });
        btnSearchByReason.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByReasonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblAmount)
                    .addComponent(lblReason)
                    .addComponent(lblDate))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtDate)
                    .addComponent(cboReason, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearchByReason, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSearchByDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByDate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblReason)
                    .addComponent(cboReason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByReason))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAmount)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchByReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByReasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchByReasonActionPerformed

    private void cboReasonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboReasonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboReasonActionPerformed

    private void btnSearchByDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchByDateMouseClicked
        // TODO add your handling code here:
     // Creating a new thread for searching by date
        Thread searchThread = new Thread(() -> {
            String date = txtDate.getText();

            if (!searchByDateFromFile(date)) {
                String formattedDate = convertDateToDatabaseFormat(date);
                if (formattedDate == null) {
                    return; 
                }
                searchByDateFromDatabase(formattedDate);
            }
        });

        searchThread.start();
    }//GEN-LAST:event_btnSearchByDateMouseClicked

      private String convertDateToDatabaseFormat(String inputDate) {
        try {
            SimpleDateFormat inputFormat = new SimpleDateFormat("MM/dd/yyyy");
            SimpleDateFormat outputFormat = new SimpleDateFormat("yyyy-MM-dd");
            return outputFormat.format(inputFormat.parse(inputDate));
        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Invalid date format. Please enter the date in MM/dd/yyyy format.");
            return null; 
        }
    }
    private void btnSearchByReasonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchByReasonMouseClicked
        // TODO add your handling code here:
        // Creating a new thread for searching by reason
        Thread searchThread = new Thread(() -> {
            String criteria = (String) cboReason.getSelectedItem();
            if (!searchByReasonFromFile(criteria)) {
                searchByReasonFromDatabase(criteria);
            }
        });

        searchThread.start();
    
                 
    }//GEN-LAST:event_btnSearchByReasonMouseClicked
private boolean searchByDateFromFile(String criteria) {
    try (FileReader reader = new FileReader("C:\\Users\\hp\\OneDrive\\Desktop\\Java_File\\dailyExpenses.txt");
         BufferedReader bufferedReader = new BufferedReader(reader)) {

        String line;
        StringBuilder found = new StringBuilder();
        boolean foundResults = false;
        while ((line = bufferedReader.readLine()) != null) {
            String[] singleLine = line.split(",");
            if (singleLine.length >= 2 && singleLine[0].equals(criteria)) {
                
             found.append("\n").append(singleLine[1]).append("   ").append(singleLine[0]);

                found.append("\n").append(singleLine[2]).append("   ").append(singleLine[1]);
            }
        }

        if (found.length() > 0) {
            txtAmount.setText(found.toString());
            return true; 
        } else {
            return false; 
        }
    } catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(null, "File not found: " + ex.getMessage());
        return false;
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Error reading file: " + ex.getMessage());
        return false; 
    }
}

private boolean searchByReasonFromFile(String criteria) {
    try (FileReader reader = new FileReader("C:\\Users\\hp\\OneDrive\\Desktop\\Java_File\\dailyExpenses.txt");
         BufferedReader bufferedReader = new BufferedReader(reader)) {

        String line;
        StringBuilder found = new StringBuilder();
        while ((line = bufferedReader.readLine()) != null) {
            String[] singleLine = line.split(",");
            if (singleLine.length >= 2 && singleLine[1].equals(criteria)) {
                found.append("\n").append(singleLine[2]).append("   ").append(singleLine[0]);
            }
        }

        if (found.length() > 0) {
            txtAmount.setText(found.toString());
            return true; 
        } else {
            return false; 
        }
    } catch (FileNotFoundException ex) {
        JOptionPane.showMessageDialog(null, "File not found: " + ex.getMessage());
        return false; 
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(null, "Error reading file: " + ex.getMessage());
        return false; 
    }
}
private void searchByDateFromDatabase(String criteria) {
    try {
        int userId = UserManager.getCurrentUserId();
         
        PreparedStatement statement = connection.prepareStatement("SELECT * FROM expense_info WHERE user_id = ? AND date = ?");
        statement.setInt(1, userId);
        statement.setString(2, criteria);
     
        ResultSet resultSet = statement.executeQuery();
        StringBuilder found = new StringBuilder();
        
        while (resultSet.next()) {
           
            String date = resultSet.getString("date");
            date = convertDateToDisplayFormat(date);
            String reason = resultSet.getString("reason");
            double amount = resultSet.getDouble("amount");
            found.append("\n").append(reason).append("     ").append(amount);
        }
        if (found.length() > 0) {
            txtAmount.setText(found.toString());
        } else {
            JOptionPane.showMessageDialog(null, "No record found for the given input");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error searching by date from database: " + ex.getMessage());
    }
}
private String convertDateToDisplayFormat(String inputDate) {
    try {
        SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat outputFormat = new SimpleDateFormat("MM/dd/yyyy");
        return outputFormat.format(inputFormat.parse(inputDate));
    } catch (ParseException ex) {
        ex.printStackTrace();
        return inputDate; 
    }
}

private void searchByReasonFromDatabase(String criteria) {
    try {
        int userId = UserManager.getCurrentUserId(); 
        PreparedStatement statement = connection.prepareStatement("SELECT * FROM expense_info WHERE user_id = ? AND reason = ?");
        statement.setInt(1, userId);
        statement.setString(2, criteria);
        ResultSet resultSet = statement.executeQuery();
        StringBuilder found = new StringBuilder();
          
        
        while (resultSet.next()) {
           
            String date = resultSet.getString("date");
            date = convertDateToDisplayFormat(date);
            String reason = resultSet.getString("reason");
            double amount = resultSet.getDouble("amount");
            found.append("\n").append(date).append("     ").append(amount);
        }
        if (found.length() > 0) {
            txtAmount.setText(found.toString());
        } else {
            JOptionPane.showMessageDialog(null, "No record found for the given input");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error searching by reason from database: " + ex.getMessage());
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearchByDate;
    private javax.swing.JButton btnSearchByReason;
    private javax.swing.JComboBox<String> cboReason;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblReason;
    private javax.swing.JTextArea txtAmount;
    private javax.swing.JTextField txtDate;
    // End of variables declaration//GEN-END:variables
}
